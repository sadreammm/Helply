# coding: utf-8

"""
    CRM Exports

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.exports.configuration import Configuration


class PublicExportViewRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "export_type": "str",
        "format": "str",
        "export_name": "str",
        "object_properties": "list[str]",
        "associated_object_type": "str",
        "object_type": "str",
        "language": "str",
        "export_internal_values_options": "list[str]",
        "override_associated_objects_per_definition_per_row_limit": "bool",
        "public_crm_search_request": "PublicCrmSearchRequest",
    }

    attribute_map = {
        "export_type": "exportType",
        "format": "format",
        "export_name": "exportName",
        "object_properties": "objectProperties",
        "associated_object_type": "associatedObjectType",
        "object_type": "objectType",
        "language": "language",
        "export_internal_values_options": "exportInternalValuesOptions",
        "override_associated_objects_per_definition_per_row_limit": "overrideAssociatedObjectsPerDefinitionPerRowLimit",
        "public_crm_search_request": "publicCrmSearchRequest",
    }

    def __init__(
        self,
        export_type="VIEW",
        format=None,
        export_name=None,
        object_properties=None,
        associated_object_type=None,
        object_type=None,
        language=None,
        export_internal_values_options=None,
        override_associated_objects_per_definition_per_row_limit=None,
        public_crm_search_request=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicExportViewRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._export_type = None
        self._format = None
        self._export_name = None
        self._object_properties = None
        self._associated_object_type = None
        self._object_type = None
        self._language = None
        self._export_internal_values_options = None
        self._override_associated_objects_per_definition_per_row_limit = None
        self._public_crm_search_request = None
        self.discriminator = None

        self.export_type = export_type
        self.format = format
        self.export_name = export_name
        self.object_properties = object_properties
        if associated_object_type is not None:
            self.associated_object_type = associated_object_type
        self.object_type = object_type
        self.language = language
        self.export_internal_values_options = export_internal_values_options
        self.override_associated_objects_per_definition_per_row_limit = override_associated_objects_per_definition_per_row_limit
        if public_crm_search_request is not None:
            self.public_crm_search_request = public_crm_search_request

    @property
    def export_type(self):
        """Gets the export_type of this PublicExportViewRequest.  # noqa: E501


        :return: The export_type of this PublicExportViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_type

    @export_type.setter
    def export_type(self, export_type):
        """Sets the export_type of this PublicExportViewRequest.


        :param export_type: The export_type of this PublicExportViewRequest.  # noqa: E501
        :type export_type: str
        """
        if self.local_vars_configuration.client_side_validation and export_type is None:  # noqa: E501
            raise ValueError("Invalid value for `export_type`, must not be `None`")  # noqa: E501
        allowed_values = ["VIEW"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and export_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `export_type` ({0}), must be one of {1}".format(export_type, allowed_values))  # noqa: E501

        self._export_type = export_type

    @property
    def format(self):
        """Gets the format of this PublicExportViewRequest.  # noqa: E501


        :return: The format of this PublicExportViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PublicExportViewRequest.


        :param format: The format of this PublicExportViewRequest.  # noqa: E501
        :type format: str
        """
        if self.local_vars_configuration.client_side_validation and format is None:  # noqa: E501
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["XLS", "XLSX", "CSV"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and format not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `format` ({0}), must be one of {1}".format(format, allowed_values))  # noqa: E501

        self._format = format

    @property
    def export_name(self):
        """Gets the export_name of this PublicExportViewRequest.  # noqa: E501


        :return: The export_name of this PublicExportViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_name

    @export_name.setter
    def export_name(self, export_name):
        """Sets the export_name of this PublicExportViewRequest.


        :param export_name: The export_name of this PublicExportViewRequest.  # noqa: E501
        :type export_name: str
        """
        if self.local_vars_configuration.client_side_validation and export_name is None:  # noqa: E501
            raise ValueError("Invalid value for `export_name`, must not be `None`")  # noqa: E501

        self._export_name = export_name

    @property
    def object_properties(self):
        """Gets the object_properties of this PublicExportViewRequest.  # noqa: E501


        :return: The object_properties of this PublicExportViewRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._object_properties

    @object_properties.setter
    def object_properties(self, object_properties):
        """Sets the object_properties of this PublicExportViewRequest.


        :param object_properties: The object_properties of this PublicExportViewRequest.  # noqa: E501
        :type object_properties: list[str]
        """
        if self.local_vars_configuration.client_side_validation and object_properties is None:  # noqa: E501
            raise ValueError("Invalid value for `object_properties`, must not be `None`")  # noqa: E501

        self._object_properties = object_properties

    @property
    def associated_object_type(self):
        """Gets the associated_object_type of this PublicExportViewRequest.  # noqa: E501


        :return: The associated_object_type of this PublicExportViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._associated_object_type

    @associated_object_type.setter
    def associated_object_type(self, associated_object_type):
        """Sets the associated_object_type of this PublicExportViewRequest.


        :param associated_object_type: The associated_object_type of this PublicExportViewRequest.  # noqa: E501
        :type associated_object_type: str
        """

        self._associated_object_type = associated_object_type

    @property
    def object_type(self):
        """Gets the object_type of this PublicExportViewRequest.  # noqa: E501


        :return: The object_type of this PublicExportViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this PublicExportViewRequest.


        :param object_type: The object_type of this PublicExportViewRequest.  # noqa: E501
        :type object_type: str
        """
        if self.local_vars_configuration.client_side_validation and object_type is None:  # noqa: E501
            raise ValueError("Invalid value for `object_type`, must not be `None`")  # noqa: E501

        self._object_type = object_type

    @property
    def language(self):
        """Gets the language of this PublicExportViewRequest.  # noqa: E501


        :return: The language of this PublicExportViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PublicExportViewRequest.


        :param language: The language of this PublicExportViewRequest.  # noqa: E501
        :type language: str
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        allowed_values = ["EN", "DE", "ES", "FR", "JA", "NL", "PT_BR", "IT", "PL", "SV", "FI", "ZH_TW", "DA_DK", "NO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and language not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `language` ({0}), must be one of {1}".format(language, allowed_values))  # noqa: E501

        self._language = language

    @property
    def export_internal_values_options(self):
        """Gets the export_internal_values_options of this PublicExportViewRequest.  # noqa: E501


        :return: The export_internal_values_options of this PublicExportViewRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._export_internal_values_options

    @export_internal_values_options.setter
    def export_internal_values_options(self, export_internal_values_options):
        """Sets the export_internal_values_options of this PublicExportViewRequest.


        :param export_internal_values_options: The export_internal_values_options of this PublicExportViewRequest.  # noqa: E501
        :type export_internal_values_options: list[str]
        """
        if self.local_vars_configuration.client_side_validation and export_internal_values_options is None:  # noqa: E501
            raise ValueError("Invalid value for `export_internal_values_options`, must not be `None`")  # noqa: E501
        allowed_values = ["NAMES", "VALUES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and not set(export_internal_values_options).issubset(set(allowed_values)):  # noqa: E501
            raise ValueError(
                "Invalid values for `export_internal_values_options` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(map(str, set(export_internal_values_options) - set(allowed_values))), ", ".join(map(str, allowed_values))  # noqa: E501
                )
            )

        self._export_internal_values_options = export_internal_values_options

    @property
    def override_associated_objects_per_definition_per_row_limit(self):
        """Gets the override_associated_objects_per_definition_per_row_limit of this PublicExportViewRequest.  # noqa: E501


        :return: The override_associated_objects_per_definition_per_row_limit of this PublicExportViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._override_associated_objects_per_definition_per_row_limit

    @override_associated_objects_per_definition_per_row_limit.setter
    def override_associated_objects_per_definition_per_row_limit(self, override_associated_objects_per_definition_per_row_limit):
        """Sets the override_associated_objects_per_definition_per_row_limit of this PublicExportViewRequest.


        :param override_associated_objects_per_definition_per_row_limit: The override_associated_objects_per_definition_per_row_limit of this PublicExportViewRequest.  # noqa: E501
        :type override_associated_objects_per_definition_per_row_limit: bool
        """
        if self.local_vars_configuration.client_side_validation and override_associated_objects_per_definition_per_row_limit is None:  # noqa: E501
            raise ValueError("Invalid value for `override_associated_objects_per_definition_per_row_limit`, must not be `None`")  # noqa: E501

        self._override_associated_objects_per_definition_per_row_limit = override_associated_objects_per_definition_per_row_limit

    @property
    def public_crm_search_request(self):
        """Gets the public_crm_search_request of this PublicExportViewRequest.  # noqa: E501


        :return: The public_crm_search_request of this PublicExportViewRequest.  # noqa: E501
        :rtype: PublicCrmSearchRequest
        """
        return self._public_crm_search_request

    @public_crm_search_request.setter
    def public_crm_search_request(self, public_crm_search_request):
        """Sets the public_crm_search_request of this PublicExportViewRequest.


        :param public_crm_search_request: The public_crm_search_request of this PublicExportViewRequest.  # noqa: E501
        :type public_crm_search_request: PublicCrmSearchRequest
        """

        self._public_crm_search_request = public_crm_search_request

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicExportViewRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicExportViewRequest):
            return True

        return self.to_dict() != other.to_dict()
