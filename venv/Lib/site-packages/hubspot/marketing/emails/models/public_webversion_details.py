# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class PublicWebversionDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "domain": "str",
        "redirect_to_page_id": "str",
        "is_page_redirected": "bool",
        "redirect_to_url": "str",
        "title": "str",
        "meta_description": "str",
        "page_expiry_enabled": "bool",
        "slug": "str",
        "url": "str",
        "expires_at": "datetime",
    }

    attribute_map = {
        "domain": "domain",
        "redirect_to_page_id": "redirectToPageId",
        "is_page_redirected": "isPageRedirected",
        "redirect_to_url": "redirectToUrl",
        "title": "title",
        "meta_description": "metaDescription",
        "page_expiry_enabled": "pageExpiryEnabled",
        "slug": "slug",
        "url": "url",
        "expires_at": "expiresAt",
    }

    def __init__(
        self,
        domain=None,
        redirect_to_page_id=None,
        is_page_redirected=None,
        redirect_to_url=None,
        title=None,
        meta_description=None,
        page_expiry_enabled=None,
        slug=None,
        url=None,
        expires_at=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicWebversionDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._domain = None
        self._redirect_to_page_id = None
        self._is_page_redirected = None
        self._redirect_to_url = None
        self._title = None
        self._meta_description = None
        self._page_expiry_enabled = None
        self._slug = None
        self._url = None
        self._expires_at = None
        self.discriminator = None

        if domain is not None:
            self.domain = domain
        if redirect_to_page_id is not None:
            self.redirect_to_page_id = redirect_to_page_id
        if is_page_redirected is not None:
            self.is_page_redirected = is_page_redirected
        if redirect_to_url is not None:
            self.redirect_to_url = redirect_to_url
        if title is not None:
            self.title = title
        if meta_description is not None:
            self.meta_description = meta_description
        if page_expiry_enabled is not None:
            self.page_expiry_enabled = page_expiry_enabled
        if slug is not None:
            self.slug = slug
        if url is not None:
            self.url = url
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def domain(self):
        """Gets the domain of this PublicWebversionDetails.  # noqa: E501

          # noqa: E501

        :return: The domain of this PublicWebversionDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PublicWebversionDetails.

          # noqa: E501

        :param domain: The domain of this PublicWebversionDetails.  # noqa: E501
        :type domain: str
        """

        self._domain = domain

    @property
    def redirect_to_page_id(self):
        """Gets the redirect_to_page_id of this PublicWebversionDetails.  # noqa: E501

          # noqa: E501

        :return: The redirect_to_page_id of this PublicWebversionDetails.  # noqa: E501
        :rtype: str
        """
        return self._redirect_to_page_id

    @redirect_to_page_id.setter
    def redirect_to_page_id(self, redirect_to_page_id):
        """Sets the redirect_to_page_id of this PublicWebversionDetails.

          # noqa: E501

        :param redirect_to_page_id: The redirect_to_page_id of this PublicWebversionDetails.  # noqa: E501
        :type redirect_to_page_id: str
        """

        self._redirect_to_page_id = redirect_to_page_id

    @property
    def is_page_redirected(self):
        """Gets the is_page_redirected of this PublicWebversionDetails.  # noqa: E501


        :return: The is_page_redirected of this PublicWebversionDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_page_redirected

    @is_page_redirected.setter
    def is_page_redirected(self, is_page_redirected):
        """Sets the is_page_redirected of this PublicWebversionDetails.


        :param is_page_redirected: The is_page_redirected of this PublicWebversionDetails.  # noqa: E501
        :type is_page_redirected: bool
        """

        self._is_page_redirected = is_page_redirected

    @property
    def redirect_to_url(self):
        """Gets the redirect_to_url of this PublicWebversionDetails.  # noqa: E501

          # noqa: E501

        :return: The redirect_to_url of this PublicWebversionDetails.  # noqa: E501
        :rtype: str
        """
        return self._redirect_to_url

    @redirect_to_url.setter
    def redirect_to_url(self, redirect_to_url):
        """Sets the redirect_to_url of this PublicWebversionDetails.

          # noqa: E501

        :param redirect_to_url: The redirect_to_url of this PublicWebversionDetails.  # noqa: E501
        :type redirect_to_url: str
        """

        self._redirect_to_url = redirect_to_url

    @property
    def title(self):
        """Gets the title of this PublicWebversionDetails.  # noqa: E501

          # noqa: E501

        :return: The title of this PublicWebversionDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PublicWebversionDetails.

          # noqa: E501

        :param title: The title of this PublicWebversionDetails.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def meta_description(self):
        """Gets the meta_description of this PublicWebversionDetails.  # noqa: E501

          # noqa: E501

        :return: The meta_description of this PublicWebversionDetails.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this PublicWebversionDetails.

          # noqa: E501

        :param meta_description: The meta_description of this PublicWebversionDetails.  # noqa: E501
        :type meta_description: str
        """

        self._meta_description = meta_description

    @property
    def page_expiry_enabled(self):
        """Gets the page_expiry_enabled of this PublicWebversionDetails.  # noqa: E501


        :return: The page_expiry_enabled of this PublicWebversionDetails.  # noqa: E501
        :rtype: bool
        """
        return self._page_expiry_enabled

    @page_expiry_enabled.setter
    def page_expiry_enabled(self, page_expiry_enabled):
        """Sets the page_expiry_enabled of this PublicWebversionDetails.


        :param page_expiry_enabled: The page_expiry_enabled of this PublicWebversionDetails.  # noqa: E501
        :type page_expiry_enabled: bool
        """

        self._page_expiry_enabled = page_expiry_enabled

    @property
    def slug(self):
        """Gets the slug of this PublicWebversionDetails.  # noqa: E501

          # noqa: E501

        :return: The slug of this PublicWebversionDetails.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PublicWebversionDetails.

          # noqa: E501

        :param slug: The slug of this PublicWebversionDetails.  # noqa: E501
        :type slug: str
        """

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this PublicWebversionDetails.  # noqa: E501


        :return: The url of this PublicWebversionDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PublicWebversionDetails.


        :param url: The url of this PublicWebversionDetails.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def expires_at(self):
        """Gets the expires_at of this PublicWebversionDetails.  # noqa: E501

          # noqa: E501

        :return: The expires_at of this PublicWebversionDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PublicWebversionDetails.

          # noqa: E501

        :param expires_at: The expires_at of this PublicWebversionDetails.  # noqa: E501
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicWebversionDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicWebversionDetails):
            return True

        return self.to_dict() != other.to_dict()
