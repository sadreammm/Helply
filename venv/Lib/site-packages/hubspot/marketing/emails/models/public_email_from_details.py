# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class PublicEmailFromDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"custom_reply_to": "str", "from_name": "str", "reply_to": "str"}

    attribute_map = {"custom_reply_to": "customReplyTo", "from_name": "fromName", "reply_to": "replyTo"}

    def __init__(self, custom_reply_to=None, from_name=None, reply_to=None, local_vars_configuration=None):  # noqa: E501
        """PublicEmailFromDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._custom_reply_to = None
        self._from_name = None
        self._reply_to = None
        self.discriminator = None

        if custom_reply_to is not None:
            self.custom_reply_to = custom_reply_to
        if from_name is not None:
            self.from_name = from_name
        if reply_to is not None:
            self.reply_to = reply_to

    @property
    def custom_reply_to(self):
        """Gets the custom_reply_to of this PublicEmailFromDetails.  # noqa: E501

        The reply to recipients will see.  # noqa: E501

        :return: The custom_reply_to of this PublicEmailFromDetails.  # noqa: E501
        :rtype: str
        """
        return self._custom_reply_to

    @custom_reply_to.setter
    def custom_reply_to(self, custom_reply_to):
        """Sets the custom_reply_to of this PublicEmailFromDetails.

        The reply to recipients will see.  # noqa: E501

        :param custom_reply_to: The custom_reply_to of this PublicEmailFromDetails.  # noqa: E501
        :type custom_reply_to: str
        """

        self._custom_reply_to = custom_reply_to

    @property
    def from_name(self):
        """Gets the from_name of this PublicEmailFromDetails.  # noqa: E501

        The name recipients will see.  # noqa: E501

        :return: The from_name of this PublicEmailFromDetails.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this PublicEmailFromDetails.

        The name recipients will see.  # noqa: E501

        :param from_name: The from_name of this PublicEmailFromDetails.  # noqa: E501
        :type from_name: str
        """

        self._from_name = from_name

    @property
    def reply_to(self):
        """Gets the reply_to of this PublicEmailFromDetails.  # noqa: E501

        The from address and reply to email address (if no customReplyTo defined) recipients will see.  # noqa: E501

        :return: The reply_to of this PublicEmailFromDetails.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this PublicEmailFromDetails.

        The from address and reply to email address (if no customReplyTo defined) recipients will see.  # noqa: E501

        :param reply_to: The reply_to of this PublicEmailFromDetails.  # noqa: E501
        :type reply_to: str
        """

        self._reply_to = reply_to

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicEmailFromDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicEmailFromDetails):
            return True

        return self.to_dict() != other.to_dict()
