# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class PublicRssEmailDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "blog_image_max_width": "int",
        "blog_email_type": "str",
        "hubspot_blog_id": "str",
        "rss_entry_template": "str",
        "timing": "dict[str, object]",
        "max_entries": "int",
        "use_headline_as_subject": "bool",
        "blog_layout": "str",
        "url": "str",
    }

    attribute_map = {
        "blog_image_max_width": "blogImageMaxWidth",
        "blog_email_type": "blogEmailType",
        "hubspot_blog_id": "hubspotBlogId",
        "rss_entry_template": "rssEntryTemplate",
        "timing": "timing",
        "max_entries": "maxEntries",
        "use_headline_as_subject": "useHeadlineAsSubject",
        "blog_layout": "blogLayout",
        "url": "url",
    }

    def __init__(
        self,
        blog_image_max_width=None,
        blog_email_type=None,
        hubspot_blog_id=None,
        rss_entry_template=None,
        timing=None,
        max_entries=None,
        use_headline_as_subject=None,
        blog_layout=None,
        url=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicRssEmailDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._blog_image_max_width = None
        self._blog_email_type = None
        self._hubspot_blog_id = None
        self._rss_entry_template = None
        self._timing = None
        self._max_entries = None
        self._use_headline_as_subject = None
        self._blog_layout = None
        self._url = None
        self.discriminator = None

        if blog_image_max_width is not None:
            self.blog_image_max_width = blog_image_max_width
        if blog_email_type is not None:
            self.blog_email_type = blog_email_type
        if hubspot_blog_id is not None:
            self.hubspot_blog_id = hubspot_blog_id
        if rss_entry_template is not None:
            self.rss_entry_template = rss_entry_template
        if timing is not None:
            self.timing = timing
        if max_entries is not None:
            self.max_entries = max_entries
        if use_headline_as_subject is not None:
            self.use_headline_as_subject = use_headline_as_subject
        if blog_layout is not None:
            self.blog_layout = blog_layout
        if url is not None:
            self.url = url

    @property
    def blog_image_max_width(self):
        """Gets the blog_image_max_width of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The blog_image_max_width of this PublicRssEmailDetails.  # noqa: E501
        :rtype: int
        """
        return self._blog_image_max_width

    @blog_image_max_width.setter
    def blog_image_max_width(self, blog_image_max_width):
        """Sets the blog_image_max_width of this PublicRssEmailDetails.

          # noqa: E501

        :param blog_image_max_width: The blog_image_max_width of this PublicRssEmailDetails.  # noqa: E501
        :type blog_image_max_width: int
        """

        self._blog_image_max_width = blog_image_max_width

    @property
    def blog_email_type(self):
        """Gets the blog_email_type of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The blog_email_type of this PublicRssEmailDetails.  # noqa: E501
        :rtype: str
        """
        return self._blog_email_type

    @blog_email_type.setter
    def blog_email_type(self, blog_email_type):
        """Sets the blog_email_type of this PublicRssEmailDetails.

          # noqa: E501

        :param blog_email_type: The blog_email_type of this PublicRssEmailDetails.  # noqa: E501
        :type blog_email_type: str
        """

        self._blog_email_type = blog_email_type

    @property
    def hubspot_blog_id(self):
        """Gets the hubspot_blog_id of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The hubspot_blog_id of this PublicRssEmailDetails.  # noqa: E501
        :rtype: str
        """
        return self._hubspot_blog_id

    @hubspot_blog_id.setter
    def hubspot_blog_id(self, hubspot_blog_id):
        """Sets the hubspot_blog_id of this PublicRssEmailDetails.

          # noqa: E501

        :param hubspot_blog_id: The hubspot_blog_id of this PublicRssEmailDetails.  # noqa: E501
        :type hubspot_blog_id: str
        """

        self._hubspot_blog_id = hubspot_blog_id

    @property
    def rss_entry_template(self):
        """Gets the rss_entry_template of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The rss_entry_template of this PublicRssEmailDetails.  # noqa: E501
        :rtype: str
        """
        return self._rss_entry_template

    @rss_entry_template.setter
    def rss_entry_template(self, rss_entry_template):
        """Sets the rss_entry_template of this PublicRssEmailDetails.

          # noqa: E501

        :param rss_entry_template: The rss_entry_template of this PublicRssEmailDetails.  # noqa: E501
        :type rss_entry_template: str
        """

        self._rss_entry_template = rss_entry_template

    @property
    def timing(self):
        """Gets the timing of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The timing of this PublicRssEmailDetails.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this PublicRssEmailDetails.

          # noqa: E501

        :param timing: The timing of this PublicRssEmailDetails.  # noqa: E501
        :type timing: dict[str, object]
        """

        self._timing = timing

    @property
    def max_entries(self):
        """Gets the max_entries of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The max_entries of this PublicRssEmailDetails.  # noqa: E501
        :rtype: int
        """
        return self._max_entries

    @max_entries.setter
    def max_entries(self, max_entries):
        """Sets the max_entries of this PublicRssEmailDetails.

          # noqa: E501

        :param max_entries: The max_entries of this PublicRssEmailDetails.  # noqa: E501
        :type max_entries: int
        """

        self._max_entries = max_entries

    @property
    def use_headline_as_subject(self):
        """Gets the use_headline_as_subject of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The use_headline_as_subject of this PublicRssEmailDetails.  # noqa: E501
        :rtype: bool
        """
        return self._use_headline_as_subject

    @use_headline_as_subject.setter
    def use_headline_as_subject(self, use_headline_as_subject):
        """Sets the use_headline_as_subject of this PublicRssEmailDetails.

          # noqa: E501

        :param use_headline_as_subject: The use_headline_as_subject of this PublicRssEmailDetails.  # noqa: E501
        :type use_headline_as_subject: bool
        """

        self._use_headline_as_subject = use_headline_as_subject

    @property
    def blog_layout(self):
        """Gets the blog_layout of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The blog_layout of this PublicRssEmailDetails.  # noqa: E501
        :rtype: str
        """
        return self._blog_layout

    @blog_layout.setter
    def blog_layout(self, blog_layout):
        """Sets the blog_layout of this PublicRssEmailDetails.

          # noqa: E501

        :param blog_layout: The blog_layout of this PublicRssEmailDetails.  # noqa: E501
        :type blog_layout: str
        """

        self._blog_layout = blog_layout

    @property
    def url(self):
        """Gets the url of this PublicRssEmailDetails.  # noqa: E501

          # noqa: E501

        :return: The url of this PublicRssEmailDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PublicRssEmailDetails.

          # noqa: E501

        :param url: The url of this PublicRssEmailDetails.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicRssEmailDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicRssEmailDetails):
            return True

        return self.to_dict() != other.to_dict()
