# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class AggregateEmailStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"emails": "list[int]", "campaign_aggregations": "dict[str, EmailStatisticsData]", "aggregate": "EmailStatisticsData"}

    attribute_map = {"emails": "emails", "campaign_aggregations": "campaignAggregations", "aggregate": "aggregate"}

    def __init__(self, emails=None, campaign_aggregations=None, aggregate=None, local_vars_configuration=None):  # noqa: E501
        """AggregateEmailStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._emails = None
        self._campaign_aggregations = None
        self._aggregate = None
        self.discriminator = None

        if emails is not None:
            self.emails = emails
        if campaign_aggregations is not None:
            self.campaign_aggregations = campaign_aggregations
        if aggregate is not None:
            self.aggregate = aggregate

    @property
    def emails(self):
        """Gets the emails of this AggregateEmailStatistics.  # noqa: E501

        List of email IDs that were sent during the time span.  # noqa: E501

        :return: The emails of this AggregateEmailStatistics.  # noqa: E501
        :rtype: list[int]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this AggregateEmailStatistics.

        List of email IDs that were sent during the time span.  # noqa: E501

        :param emails: The emails of this AggregateEmailStatistics.  # noqa: E501
        :type emails: list[int]
        """

        self._emails = emails

    @property
    def campaign_aggregations(self):
        """Gets the campaign_aggregations of this AggregateEmailStatistics.  # noqa: E501

        The aggregated statistics per campaign.  # noqa: E501

        :return: The campaign_aggregations of this AggregateEmailStatistics.  # noqa: E501
        :rtype: dict[str, EmailStatisticsData]
        """
        return self._campaign_aggregations

    @campaign_aggregations.setter
    def campaign_aggregations(self, campaign_aggregations):
        """Sets the campaign_aggregations of this AggregateEmailStatistics.

        The aggregated statistics per campaign.  # noqa: E501

        :param campaign_aggregations: The campaign_aggregations of this AggregateEmailStatistics.  # noqa: E501
        :type campaign_aggregations: dict[str, EmailStatisticsData]
        """

        self._campaign_aggregations = campaign_aggregations

    @property
    def aggregate(self):
        """Gets the aggregate of this AggregateEmailStatistics.  # noqa: E501


        :return: The aggregate of this AggregateEmailStatistics.  # noqa: E501
        :rtype: EmailStatisticsData
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """Sets the aggregate of this AggregateEmailStatistics.


        :param aggregate: The aggregate of this AggregateEmailStatistics.  # noqa: E501
        :type aggregate: EmailStatisticsData
        """

        self._aggregate = aggregate

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregateEmailStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AggregateEmailStatistics):
            return True

        return self.to_dict() != other.to_dict()
