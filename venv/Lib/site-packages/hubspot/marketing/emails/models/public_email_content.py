# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class PublicEmailContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "smart_fields": "dict[str, object]",
        "theme_settings_values": "dict[str, object]",
        "flex_areas": "dict[str, object]",
        "widgets": "dict[str, object]",
        "plain_text_version": "str",
        "template_path": "str",
        "widget_containers": "dict[str, object]",
        "style_settings": "PublicEmailStyleSettings",
    }

    attribute_map = {
        "smart_fields": "smartFields",
        "theme_settings_values": "themeSettingsValues",
        "flex_areas": "flexAreas",
        "widgets": "widgets",
        "plain_text_version": "plainTextVersion",
        "template_path": "templatePath",
        "widget_containers": "widgetContainers",
        "style_settings": "styleSettings",
    }

    def __init__(
        self,
        smart_fields=None,
        theme_settings_values=None,
        flex_areas=None,
        widgets=None,
        plain_text_version=None,
        template_path=None,
        widget_containers=None,
        style_settings=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicEmailContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._smart_fields = None
        self._theme_settings_values = None
        self._flex_areas = None
        self._widgets = None
        self._plain_text_version = None
        self._template_path = None
        self._widget_containers = None
        self._style_settings = None
        self.discriminator = None

        if smart_fields is not None:
            self.smart_fields = smart_fields
        if theme_settings_values is not None:
            self.theme_settings_values = theme_settings_values
        if flex_areas is not None:
            self.flex_areas = flex_areas
        if widgets is not None:
            self.widgets = widgets
        if plain_text_version is not None:
            self.plain_text_version = plain_text_version
        if template_path is not None:
            self.template_path = template_path
        if widget_containers is not None:
            self.widget_containers = widget_containers
        if style_settings is not None:
            self.style_settings = style_settings

    @property
    def smart_fields(self):
        """Gets the smart_fields of this PublicEmailContent.  # noqa: E501

          # noqa: E501

        :return: The smart_fields of this PublicEmailContent.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._smart_fields

    @smart_fields.setter
    def smart_fields(self, smart_fields):
        """Sets the smart_fields of this PublicEmailContent.

          # noqa: E501

        :param smart_fields: The smart_fields of this PublicEmailContent.  # noqa: E501
        :type smart_fields: dict[str, object]
        """

        self._smart_fields = smart_fields

    @property
    def theme_settings_values(self):
        """Gets the theme_settings_values of this PublicEmailContent.  # noqa: E501

          # noqa: E501

        :return: The theme_settings_values of this PublicEmailContent.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._theme_settings_values

    @theme_settings_values.setter
    def theme_settings_values(self, theme_settings_values):
        """Sets the theme_settings_values of this PublicEmailContent.

          # noqa: E501

        :param theme_settings_values: The theme_settings_values of this PublicEmailContent.  # noqa: E501
        :type theme_settings_values: dict[str, object]
        """

        self._theme_settings_values = theme_settings_values

    @property
    def flex_areas(self):
        """Gets the flex_areas of this PublicEmailContent.  # noqa: E501

          # noqa: E501

        :return: The flex_areas of this PublicEmailContent.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._flex_areas

    @flex_areas.setter
    def flex_areas(self, flex_areas):
        """Sets the flex_areas of this PublicEmailContent.

          # noqa: E501

        :param flex_areas: The flex_areas of this PublicEmailContent.  # noqa: E501
        :type flex_areas: dict[str, object]
        """

        self._flex_areas = flex_areas

    @property
    def widgets(self):
        """Gets the widgets of this PublicEmailContent.  # noqa: E501

          # noqa: E501

        :return: The widgets of this PublicEmailContent.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this PublicEmailContent.

          # noqa: E501

        :param widgets: The widgets of this PublicEmailContent.  # noqa: E501
        :type widgets: dict[str, object]
        """

        self._widgets = widgets

    @property
    def plain_text_version(self):
        """Gets the plain_text_version of this PublicEmailContent.  # noqa: E501

          # noqa: E501

        :return: The plain_text_version of this PublicEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._plain_text_version

    @plain_text_version.setter
    def plain_text_version(self, plain_text_version):
        """Sets the plain_text_version of this PublicEmailContent.

          # noqa: E501

        :param plain_text_version: The plain_text_version of this PublicEmailContent.  # noqa: E501
        :type plain_text_version: str
        """

        self._plain_text_version = plain_text_version

    @property
    def template_path(self):
        """Gets the template_path of this PublicEmailContent.  # noqa: E501

          # noqa: E501

        :return: The template_path of this PublicEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._template_path

    @template_path.setter
    def template_path(self, template_path):
        """Sets the template_path of this PublicEmailContent.

          # noqa: E501

        :param template_path: The template_path of this PublicEmailContent.  # noqa: E501
        :type template_path: str
        """

        self._template_path = template_path

    @property
    def widget_containers(self):
        """Gets the widget_containers of this PublicEmailContent.  # noqa: E501

          # noqa: E501

        :return: The widget_containers of this PublicEmailContent.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._widget_containers

    @widget_containers.setter
    def widget_containers(self, widget_containers):
        """Sets the widget_containers of this PublicEmailContent.

          # noqa: E501

        :param widget_containers: The widget_containers of this PublicEmailContent.  # noqa: E501
        :type widget_containers: dict[str, object]
        """

        self._widget_containers = widget_containers

    @property
    def style_settings(self):
        """Gets the style_settings of this PublicEmailContent.  # noqa: E501


        :return: The style_settings of this PublicEmailContent.  # noqa: E501
        :rtype: PublicEmailStyleSettings
        """
        return self._style_settings

    @style_settings.setter
    def style_settings(self, style_settings):
        """Sets the style_settings of this PublicEmailContent.


        :param style_settings: The style_settings of this PublicEmailContent.  # noqa: E501
        :type style_settings: PublicEmailStyleSettings
        """

        self._style_settings = style_settings

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicEmailContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicEmailContent):
            return True

        return self.to_dict() != other.to_dict()
