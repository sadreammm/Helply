# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class PublicEmailToDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "contact_ils_lists": "PublicEmailRecipients",
        "limit_send_frequency": "bool",
        "suppress_graymail": "bool",
        "contact_ids": "PublicEmailRecipients",
        "contact_lists": "PublicEmailRecipients",
    }

    attribute_map = {
        "contact_ils_lists": "contactIlsLists",
        "limit_send_frequency": "limitSendFrequency",
        "suppress_graymail": "suppressGraymail",
        "contact_ids": "contactIds",
        "contact_lists": "contactLists",
    }

    def __init__(self, contact_ils_lists=None, limit_send_frequency=None, suppress_graymail=None, contact_ids=None, contact_lists=None, local_vars_configuration=None):  # noqa: E501
        """PublicEmailToDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._contact_ils_lists = None
        self._limit_send_frequency = None
        self._suppress_graymail = None
        self._contact_ids = None
        self._contact_lists = None
        self.discriminator = None

        if contact_ils_lists is not None:
            self.contact_ils_lists = contact_ils_lists
        if limit_send_frequency is not None:
            self.limit_send_frequency = limit_send_frequency
        if suppress_graymail is not None:
            self.suppress_graymail = suppress_graymail
        if contact_ids is not None:
            self.contact_ids = contact_ids
        if contact_lists is not None:
            self.contact_lists = contact_lists

    @property
    def contact_ils_lists(self):
        """Gets the contact_ils_lists of this PublicEmailToDetails.  # noqa: E501


        :return: The contact_ils_lists of this PublicEmailToDetails.  # noqa: E501
        :rtype: PublicEmailRecipients
        """
        return self._contact_ils_lists

    @contact_ils_lists.setter
    def contact_ils_lists(self, contact_ils_lists):
        """Sets the contact_ils_lists of this PublicEmailToDetails.


        :param contact_ils_lists: The contact_ils_lists of this PublicEmailToDetails.  # noqa: E501
        :type contact_ils_lists: PublicEmailRecipients
        """

        self._contact_ils_lists = contact_ils_lists

    @property
    def limit_send_frequency(self):
        """Gets the limit_send_frequency of this PublicEmailToDetails.  # noqa: E501

          # noqa: E501

        :return: The limit_send_frequency of this PublicEmailToDetails.  # noqa: E501
        :rtype: bool
        """
        return self._limit_send_frequency

    @limit_send_frequency.setter
    def limit_send_frequency(self, limit_send_frequency):
        """Sets the limit_send_frequency of this PublicEmailToDetails.

          # noqa: E501

        :param limit_send_frequency: The limit_send_frequency of this PublicEmailToDetails.  # noqa: E501
        :type limit_send_frequency: bool
        """

        self._limit_send_frequency = limit_send_frequency

    @property
    def suppress_graymail(self):
        """Gets the suppress_graymail of this PublicEmailToDetails.  # noqa: E501

          # noqa: E501

        :return: The suppress_graymail of this PublicEmailToDetails.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_graymail

    @suppress_graymail.setter
    def suppress_graymail(self, suppress_graymail):
        """Sets the suppress_graymail of this PublicEmailToDetails.

          # noqa: E501

        :param suppress_graymail: The suppress_graymail of this PublicEmailToDetails.  # noqa: E501
        :type suppress_graymail: bool
        """

        self._suppress_graymail = suppress_graymail

    @property
    def contact_ids(self):
        """Gets the contact_ids of this PublicEmailToDetails.  # noqa: E501


        :return: The contact_ids of this PublicEmailToDetails.  # noqa: E501
        :rtype: PublicEmailRecipients
        """
        return self._contact_ids

    @contact_ids.setter
    def contact_ids(self, contact_ids):
        """Sets the contact_ids of this PublicEmailToDetails.


        :param contact_ids: The contact_ids of this PublicEmailToDetails.  # noqa: E501
        :type contact_ids: PublicEmailRecipients
        """

        self._contact_ids = contact_ids

    @property
    def contact_lists(self):
        """Gets the contact_lists of this PublicEmailToDetails.  # noqa: E501


        :return: The contact_lists of this PublicEmailToDetails.  # noqa: E501
        :rtype: PublicEmailRecipients
        """
        return self._contact_lists

    @contact_lists.setter
    def contact_lists(self, contact_lists):
        """Sets the contact_lists of this PublicEmailToDetails.


        :param contact_lists: The contact_lists of this PublicEmailToDetails.  # noqa: E501
        :type contact_lists: PublicEmailRecipients
        """

        self._contact_lists = contact_lists

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicEmailToDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicEmailToDetails):
            return True

        return self.to_dict() != other.to_dict()
