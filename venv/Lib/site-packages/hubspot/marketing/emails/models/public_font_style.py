# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class PublicFontStyle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"size": "int", "color": "str", "underline": "bool", "bold": "bool", "italic": "bool", "font": "str"}

    attribute_map = {"size": "size", "color": "color", "underline": "underline", "bold": "bold", "italic": "italic", "font": "font"}

    def __init__(self, size=None, color=None, underline=None, bold=None, italic=None, font=None, local_vars_configuration=None):  # noqa: E501
        """PublicFontStyle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._size = None
        self._color = None
        self._underline = None
        self._bold = None
        self._italic = None
        self._font = None
        self.discriminator = None

        if size is not None:
            self.size = size
        if color is not None:
            self.color = color
        if underline is not None:
            self.underline = underline
        if bold is not None:
            self.bold = bold
        if italic is not None:
            self.italic = italic
        if font is not None:
            self.font = font

    @property
    def size(self):
        """Gets the size of this PublicFontStyle.  # noqa: E501


        :return: The size of this PublicFontStyle.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PublicFontStyle.


        :param size: The size of this PublicFontStyle.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def color(self):
        """Gets the color of this PublicFontStyle.  # noqa: E501


        :return: The color of this PublicFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PublicFontStyle.


        :param color: The color of this PublicFontStyle.  # noqa: E501
        :type color: str
        """

        self._color = color

    @property
    def underline(self):
        """Gets the underline of this PublicFontStyle.  # noqa: E501


        :return: The underline of this PublicFontStyle.  # noqa: E501
        :rtype: bool
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this PublicFontStyle.


        :param underline: The underline of this PublicFontStyle.  # noqa: E501
        :type underline: bool
        """

        self._underline = underline

    @property
    def bold(self):
        """Gets the bold of this PublicFontStyle.  # noqa: E501


        :return: The bold of this PublicFontStyle.  # noqa: E501
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this PublicFontStyle.


        :param bold: The bold of this PublicFontStyle.  # noqa: E501
        :type bold: bool
        """

        self._bold = bold

    @property
    def italic(self):
        """Gets the italic of this PublicFontStyle.  # noqa: E501


        :return: The italic of this PublicFontStyle.  # noqa: E501
        :rtype: bool
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this PublicFontStyle.


        :param italic: The italic of this PublicFontStyle.  # noqa: E501
        :type italic: bool
        """

        self._italic = italic

    @property
    def font(self):
        """Gets the font of this PublicFontStyle.  # noqa: E501


        :return: The font of this PublicFontStyle.  # noqa: E501
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this PublicFontStyle.


        :param font: The font of this PublicFontStyle.  # noqa: E501
        :type font: str
        """

        self._font = font

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicFontStyle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicFontStyle):
            return True

        return self.to_dict() != other.to_dict()
