# coding: utf-8

"""
    Marketing Emails

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.emails.configuration import Configuration


class PublicButtonStyleSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"background_color": "object", "font_style": "PublicFontStyle", "corner_radius": "int"}

    attribute_map = {"background_color": "backgroundColor", "font_style": "fontStyle", "corner_radius": "cornerRadius"}

    def __init__(self, background_color=None, font_style=None, corner_radius=None, local_vars_configuration=None):  # noqa: E501
        """PublicButtonStyleSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._background_color = None
        self._font_style = None
        self._corner_radius = None
        self.discriminator = None

        if background_color is not None:
            self.background_color = background_color
        if font_style is not None:
            self.font_style = font_style
        if corner_radius is not None:
            self.corner_radius = corner_radius

    @property
    def background_color(self):
        """Gets the background_color of this PublicButtonStyleSettings.  # noqa: E501


        :return: The background_color of this PublicButtonStyleSettings.  # noqa: E501
        :rtype: object
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this PublicButtonStyleSettings.


        :param background_color: The background_color of this PublicButtonStyleSettings.  # noqa: E501
        :type background_color: object
        """

        self._background_color = background_color

    @property
    def font_style(self):
        """Gets the font_style of this PublicButtonStyleSettings.  # noqa: E501


        :return: The font_style of this PublicButtonStyleSettings.  # noqa: E501
        :rtype: PublicFontStyle
        """
        return self._font_style

    @font_style.setter
    def font_style(self, font_style):
        """Sets the font_style of this PublicButtonStyleSettings.


        :param font_style: The font_style of this PublicButtonStyleSettings.  # noqa: E501
        :type font_style: PublicFontStyle
        """

        self._font_style = font_style

    @property
    def corner_radius(self):
        """Gets the corner_radius of this PublicButtonStyleSettings.  # noqa: E501


        :return: The corner_radius of this PublicButtonStyleSettings.  # noqa: E501
        :rtype: int
        """
        return self._corner_radius

    @corner_radius.setter
    def corner_radius(self, corner_radius):
        """Sets the corner_radius of this PublicButtonStyleSettings.


        :param corner_radius: The corner_radius of this PublicButtonStyleSettings.  # noqa: E501
        :type corner_radius: int
        """

        self._corner_radius = corner_radius

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicButtonStyleSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicButtonStyleSettings):
            return True

        return self.to_dict() != other.to_dict()
